Select * from fact;
Select * from Product;
Select * from Location;

--  1. Display the number of states present in theLocationTable. select count(distinct state) as s from Location;--  2. Howmany products are of regular type?select count(product) as no_of_productsfrom Productwhere type = 'Regular'; -- 3. Howmuch spending has been done on marketing of product ID1? select sum(marketing) as spending from fact where ProductId = 1; --4. What is the minimum sales of a product? select min(Sales) as min_sales from fact; 5. Display the max Cost of Good Sold (COGS). select * from fact where COGS = ( select max(COGS) FROM fact); select max(COGS) as maximum_cost from fact; -----Display the details of the product where product type is coffee-- select * from Product where Product_Type = 'coffee';----- Display the details where total expenses are greater than 40----select * from factwhere Total_Expenses > 40order by Total_Expenses desc;----What is the average sales in area code 719?-----select avg(Sales) as Avg_Sale from factwhere Area_Code=719; ---Find out the total profit generated by Colorado state--- Select sum(profit), state  from fact join Location on fact.Area_Code = Location.Area_Code group by state having state = 'Colorado'; --- Display the average inventory for each product ID-- select ProductId, avg(Inventory) as average_Inventory from fact group by ProductId order by ProductId; --Display state in a sequential order in a LocationTable-- select distinct state from Location order by State;

 -- 11 Display state in a sequential order in a LocationTable.select distinct(State) from Location order by state-- 12  Display the average budget of the Product where the average budget-- margin should be greater than 100. select avg(budget_margin) ,ProductId  from fact group by ProductIdhaving avg(budget_margin)>100--- 13    What is the total sales done on date 2010-01-01?select sum(Sales) from factwhere date = '2010-01-01'-- 14:   Display the average total expense of each product ID on anindividual date.select avg(total_expenses), productId, date from factgroup by ProductId, date-- 16  Display the rank without any gap to show the sales wiserank.select * , DENSE_RANK() over(order by sales desc) as sales_rankfrom fact--  Find the state wise profit and sales.select sum(profit) , sum(sales) , state from fact join locationon fact.Area_Code = Location.Area_Codegroup by state;-- Find the state wise profit and sales along with the productname.select state, product , sum(profit), sum(sales) from factjoin Locationon fact.Area_Code = Location.Area_Codejoin Producton  fact.ProductId = Product.ProductIdgroup by state , product -- If there is an increase in sales of 5%, calculate the increasedsales select sales , sales*0.05 as increment  from fact--  Find the maximum profit along with the product ID and producttype.select fact.ProductId, product_type , profitfrom factjoin product on fact.ProductId = Product.ProductIdwhere profit = (select  max(profit) from fact);--21.Create a stored procedure to fetch the result according to theproduct type from ProductTable.CREATE PROCEDURE GetProductsByType
    @ProductType NVARCHAR(50)
AS
BEGIN
    SELECT * FROM ProductTable
    WHERE [Product Type] = @ProductType;
END;

--22. Write a query: If the total expenses are less than 60 then it is a profit, else loss sql
SELECT Date, ProductId, 
    CASE 
        WHEN Total_Expenses < 60 THEN 'Profit' 
        ELSE 'Loss' 
    END AS ProfitStatus
FROM Fact;

--23.  Give the total weekly sales value with the date and product IDdetails. Use roll-up to pull the data in hierarchical order.
SELECT 
    DATEPART(week, CAST(Date AS DATE)) AS WeekNo, 
    ProductId, 
    SUM(Sales) AS TotalSales
FROM Fact
GROUP BY ROLLUP(DATEPART(week, CAST(Date AS DATE)), ProductId);

--24.Apply union and intersection operator on the tables which consistof attribute area code.
SELECT Area_Code FROM Fact
UNION
SELECT Area_Code FROM Location;

--25. Create a user-defined function for the product table to fetch a particular product type based on user preference
CREATE FUNCTION dbo.GetProductsByType (@ProductType NVARCHAR(50))
RETURNS TABLE
AS
RETURN
    SELECT * FROM Product
    WHERE Product_Type = @ProductType;

SELECT * FROM dbo.GetProductsByType('Coffee');

--26. Change the product type from coffee to tea where product ID is 1 and undo it
-- Change to Tea
UPDATE Product
SET Product_Type = 'Tea'
WHERE ProductId = 1;

-- Undo (set back to Coffee)
UPDATE Product
SET Product_Type = 'Coffee'
WHERE ProductId = 1;

--27. Display the date, product ID and sales where total expenses are between 100 to 200
SELECT Date, ProductId, Sales
FROM Fact
WHERE Total_Expenses BETWEEN 100 AND 200;

--28. Delete the records in the ProductTable for regular type
DELETE FROM Product
WHERE Type = 'Regular';

--29. Display the ASCII value of the fifth character from the column 'Product'
SELECT Product, ASCII(SUBSTRING(Product,5,1)) AS FifthCharAscii
FROM ProducT;






